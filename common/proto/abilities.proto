syntax = "proto3";

enum ProtoAbilityType {
    ProtoClimaxTrigger = 0;
    ProtoGlobal = 1;
    ProtoCard = 2;
    ProtoRuleAction = 3;
}

enum ProtoOwner {
    ProtoPlayer = 0;
    ProtoOpponent = 1;
}

message ProtoAbility {
    ProtoAbilityType type = 1;
    string zone = 2;
    string cardCode = 3;
    sint32 cardId = 4;
    sint32 abilityId = 5;
    uint32 uniqueId = 6;
}

message EventAbilityActivated {
    repeated ProtoAbility abilities = 1;
}

message CommandPlayAbility {
    uint32 uniqueId = 1;
}

message EventPlayAbility {
    uint32 uniqueId = 1;
}

message CommandPlayEffect {}
message CommandCancelEffect {}

message EventStartResolvingAbility {
    uint32 uniqueId = 1;
}

message EventAbilityResolved {
    uint32 uniqueId = 1;
}
message EventEndResolvingAbilties {}

message EventChooseCard {
    bytes effect = 1;
    bool mandatory = 2;
}

message CommandChooseCard {
    repeated sint32 ids = 1;
    string zone = 2;
    ProtoOwner owner = 3;
}

message EventMoveChoice {
    bytes effect = 1;
    bool mandatory = 2;
}

message EventMoveTargetChoice {
    bytes effect = 1;
    bool mandatory = 2;
}

message EventMoveDestinationChoice {
    bytes effect = 1;
    bool mandatory = 2;
}

message EventMoveDestinationIndexChoice {
    bytes effect = 1;
    bool mandatory = 2;
}

message EventDrawChoice {
    bytes effect = 1;
    bool mandatory = 2;
}

message CommandChoice {
    sint32 choice = 1;
}

message EventLook {
    bytes effect = 1;
    sint32 nextEffectType = 2;
    bytes nextEffect = 3;
}

message CommandLookTopDeck {}
message CommandConfirmMove {}
message CommandMoveInOrder {
    repeated string codes = 1;
}

message EventLookTopDeck {
    string code = 1;
}

message EventRevealTopDeck {
    string code = 1;
}

message EventConditionNotMet {}
message EventPayCost {}

message EventSearchCard {
    bytes effect = 1;
    repeated string codes = 2;
}

message EventAbilityChoice {
    bytes effect = 1;
}

message EventAbilityGain {
    sint32 cardId = 1;
    string zone = 2;
    bytes ability = 3;
}

message EventRemoveAbility {
    sint32 cardId = 1;
    string zone = 2;
    sint32 abilityId = 3;
}

message CommandPlayAct {
    sint32 cardId = 1;
    sint32 abilityId = 2;
}

message EventSetCannotPlay {
    sint32 handId = 1;
    bool cannotPlay = 2;
}
